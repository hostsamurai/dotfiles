{
  nnoremap: {
    // -- Applications ------------------------
    a: {
      name: "+applications",
      c: [":Calc<CR>",        "calculator"],
      u: [":GundoToggle<CR>", "undo tree"],
      l: {
        name: "+coc",
        u: [":CocUpdate<CR>", "update coc"]
      },
      s: {
        name: "+session",
        o: [":OpenSession ",    "open session"],
        s: [":SaveSession ",    "save session"],
        u: [":SaveSession<CR>", "save current session"]
      },
      t: [":terminal<CR>", "terminal"]
    },

    // -- Buffers -----------------------------
    b: {
      name: "+buffer",
      b: [":<C-u>Denite buffer<CR>",  "find buffer"],
      d: [":bd<CR>",                  "delete buffer"],
      h: [":tabnew \\| Startify<CR>", "home buffer"],
      m: [":BufExplorer<CR>",         "manage buffers"],
      s: [":Scratch<CR>",             "scratch buffer"]
    },


    // -- Files -------------------------------
    f: {
      name: "+files",
      f: [":DeniteProjectDir file/rec", "find file"],
      r: [":Denite file_mru",           "recent files"],
      t: [":NERDTreeToggle",            "NERDTree"],
      v: {
        name: "+vimrc",
        s: [":so $MYVIMRC",     "source vimrc"],
        t: [":tabnew $MYVIMRC", "edit vimrc"]
      }
    },

    // -- Project -----------------------------
    p: {
      name: "+project",
      b: [":DeniteProjectDir file/rec", "find project file"],
      t: {
        name: "+tags",
        c: [":GenCtags", "generate ctags"],
        g: [":GenGTAGS", "generate gtags"]
      }
    },

    // -- Insertion ---------------------------
    i: {
      name: "+insertion",
      s: {
        name: "+snippets",
        e: [":CocCommand snippets.editSnippets<CR>",     "edit snippets"],
        c: [":CocCommand snippets.openSnippetFiles<CR>", "open snippets file"]
      }
    },

    // -- Version Control ---------------------
    // TODO:
    // Space + g + b + # --> git blame
    // Space + g + b + c --> git checkout -b
    // Space + g + c + - --> git checkout --
    // Space + g + p + p --> git push
    // Space + g + p + f --> git push --force
    // ----------------------------------------
    g: {
      name: "+version control",
      s: [":Gina status<CR>", "status"],
      m: [":Magit<CR>",       "magit"]
    },

    // -- Search ------------------------------
    s: {
      name: "+search",
      c: [":nohlsearch<CR>",               "clear highlights"],
      g: [":<C-u>Denite grep:. -no-empty", "search cwd"],
      u: [":<C-u>DeniteCursorWord grep:.", "word under cursor"],
      r: {
        name: "+ripgrep",
        g: [":tabnew:Rg -i", "rg"]
      }
    },

    // More sane regexes
    "/": "/\\v",
    "?": "?\\v",
    "s/": "s/\\v",

    // -- Text --------------------------------
    // - --> Delete the current line
    // Q --> Don't use Ex mode, use Q for formatting
    // Y --> Make Y behave like other capital letters
    // ----------------------------------------
    "-": "dd",
    Q: "gq",
    Y: "y$",

    x: {
      name: "+text",
      a: [":EasyAlign", "align text"]
    },

    // -- Toggles -----------------------------
    // Space + t + c --> Cycle through color schemes via denite
    // ----------------------------------------
    t: {
      name: "+toogles",
      c: [":Denite colorscheme", "cycle color schemes"]
    },

    // -- Windows -----------------------------
    // Easier window navigation
    // Ctrl + h --> Go to window left of current
    // Ctrl + j --> Go to window below current
    // Ctrl + k --> Go to window above current
    // Ctrl + l --> Go to window right of current
    // ----------------------------------------
    "<C-h>": "<C-w>h",
    "<C-j>": "<C-w>j",
    "<C-k>": "<C-w>k",
    "<C-l>": "<C-w>l",

    w: {
      name: "+windows",
      "-": [":exe 'split'<CR>",    "horizontal split"],
      "\\|": [":exe 'vsplit'<CR>", "vertical split"],
      c: [":close<CR>",            "close current window"],
      l: [":lopen<CR>",            "open location list"],
      q: [":copen<CR>",            "open quickfix"],
      W: ["<Plug>(choosewin)",     "jump to window"]
    }
  },

  noremap: {
    // Easier navigation on line-wrapped text
    j: "gj",
    k: "gk",
    gj: "j",
    gk: "k",

    tc: ":tabnew<CR>"
  },

  cnoremap: {
    // Heretical mappings
    // Ctrl + a --> Jump to beginning of line
    // Ctrl + b --> Back one character
    // Ctrl + d --> Delete one character
    // Ctrl + e --> Jump to end of line
    // Ctrl + f --> Forward one character
    // Ctrl + n --> Go forwards in history to the a newer entry
    // Ctrl + p --> Go backwards in history to an older entry
    // ----------------------------------------
    "<C-A>": "<Home>",
    "<C-B>": "<Left>",
    "<C-D>": "<Del>",
    "<C-E>": "<End>",
    "<C-F>": "<Right>",
    "<C-N>": "<Down>",
    "<C-P>": "<Up>",

    // More sane regexes
    "s/": "s/\\v",
    "%s/": "%s/\\v",

    // Using sudo to write to a file
    "w!!": "w !sudo tee % >/dev/null"
  },

  inoremap: {
    // jk --> Escape from insert mode without stretching your fingers
    // Ctrl + U --> CTRL-U in insert mode deletes a lot. Use CTRL-G u to first break undo,
    //              so that you can undo CTRL-U after inserting a line break.
    // Ctrl + d --> Delete text after the cusor position in insert mode.
    // ----------------------------------------
    jk:      "<ESC>",
    "<C-U>": "<C-G>u<C-U>",
    "<C-d>": "<C-[>ld$A",

    // coc.nvim snippets - see https://github.com/neoclide/coc.nvim/wiki/Using-snippets
    "<silent><expr> <CR>": 'pumvisible() ? coc#_select_confirm() : "<C-g>u<CR><c-r>=coc#on_enter()<CR>"'
  },

  snoremap: {},

  tnoremap: {
    // Navigate windows from the terminal using Alt + h/j/k/l
    "<A-h>": "<C-><C-N><C-w>h",
    "<A-j>": "<C-><C-N><C-w>j",
    "<A-k>": "<C-><C-N><C-w>k",
    "<A-l>": "<C-><C-N><C-w>l",

    // Simulate i_CTRL-R
    "<expr> <C-R>": "'<C-><C-N>\"' . nr2char(getchar()) . 'pi'",

    // Exit terminal mode easily
    "<Esc>": "<C-><C-N>"
  },

  vnoremap: {
    // More sane regexes
    "/":   "/\\v",
    "?":   "?\\v",
    "s/":  "s/\\v",
    "%s/": "%s/\\v"
  },

  map: {
    // -- Comment/Compile ---------------------
    c: {
      name: "+comments/compile",
      c: ["<plug>NERDCommenterSexy",      "comment"],
      u: ["<plug>NERDCommenterUncomment", "uncomment"]
    },


    // -- Jumps/Folds -------------------------
    j: {
      name: "+jumps/folds",
      j: ["<Plug>(easymotion-s)", "easymotion"]
    }

    // -- Windows -----------------------------
    w: {
      name: "+windows",
      W: ["<Plug>(choosewin)", "jump to window"]
    }
  },

  nmap: {
    // Start interactive EasyAlign for a motion/text object (e.g. gaip)
    //"ga": "<Plug>(EasyAlign)",
  },

  imap: {
    // FIXME: neosnippet tab completion - currently not fully working
    "<expr><TAB>": "pumvisible() ? '<C-n>' : neosnippet#expandable_or_jumpable() ? '<Plug>(neosnippet_expand_or_jump)' : '<TAB>'",
    "<expr><CR>": '(pumvisible() && neosnippet#expandable()) ?  "<Plug>(neosnippet_expand)" : "<CR>"'
  },

  smap: {
    "<expr><TAB>": "neosnippet#expandable_or_jumpable() ? '<Plug>(neosnippet_expand_or_jump)' : '<TAB>'"
  },

  vmap: {
    // Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
    "<Enter>": "<Plug>(EasyAlign)"
  }
}
