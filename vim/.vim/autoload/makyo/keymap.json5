{
  nnoremap: {
    // -- Applications ------------------------
    a: {
      name: "+applications",
      c: [":Calc<CR>",        "calculator"],
      u: [":GundoToggle<CR>", "undo tree"],
      l: {
        name: "+coc",
        u: [":CocUpdate<CR>", "update coc"]
      },
      s: {
        name: "+session",
        o: [":OpenSession ",    "open session"],
        s: [":SaveSession ",    "save session"],
        u: [":SaveSession<CR>", "save current session"]
      },
      t: [":terminal<CR>", "terminal"]
    },

    // -- Buffers -----------------------------
    b: {
      name: "+buffer",
      b: [":<C-u>Denite buffer<CR>",  "find buffer"],
      d: [":bd<CR>",                  "delete buffer"],
      h: [":tabnew \\| Startify<CR>", "home buffer"],
      m: [":BufExplorer<CR>",         "manage buffers"],
      p: [":bprevious<CR>",           "previous buffer"],
      s: [":Scratch<CR>",             "scratch buffer"]
    },

    // -- Files -------------------------------
    f: {
      name: "+files",
      c: [':let @+ = expand("%")<CR>',      "copy file path"],
      f: [":DeniteProjectDir file/rec<CR>", "find file"],
      r: [":Denite file_mru<CR>",           "recent files"],
      t: [":NERDTreeToggle<CR>",            "NERDTree"],
      v: {
        name: "+vim",
        k: [":tabnew ~/.vim/autoload/makyo/keymap.json5<CR>", "open keymap config"],
        s: [":so $MYVIMRC<CR>",     "source vimrc"],
        t: [":tabnew $MYVIMRC<CR>", "edit vimrc"]
      }
    },

    // -- Project -----------------------------
    p: {
      name: "+project",
      b: [":DeniteProjectDir file/rec<CR>", "find project file"],
      c: {
        name: "+checks",
        t: {
          name: "+tests",
          n: [":TestNearest<CR>", "nearest"],
          f: [":TestFile<CR>",    "file"],
          s: [":TestSuite<CR>",   "suite"],
          v: [":TestVisit<CR>",   "jump to test file"]
        }
      },
      t: {
        name: "+tags",
        c: [":GenCtags<CR>", "generate ctags"],
        g: [":GenGTAGS<CR>", "generate gtags"],
        t: [":Vista!!<CR>",  "tags view"]
      }
    },

    // -- Insertion ---------------------------
    i: {
      name: "+insertion",
      s: {
        name: "+snippets",
        c: [":CocCommand snippets.openSnippetFiles<CR>", "open snippets file"],
        e: [":CocCommand snippets.editSnippets<CR>",     "edit snippets"],
        l: [":CocList snippets<CR>",                     "list snippets"]
      }
    },

    // -- Version Control ---------------------
    g: {
      name: "+version-control",
      b: {
        name: "+branch",
        l: [":Gina branch<CR>",                "list branches"],
        m: [":Gina blame<CR>",                 "blame inline"],
        r: [":Gina browse --scheme=blame<CR>", "blame in browser"]
      },
      c: {
        name: "+commit",
        a: [":Gina commit --amend<CR>",           "amend"],
        c: [":Gina commit<CR>",                   "commit"],
        m: [":Gina commit -m ",                   "simple commit"],
        n: [":Gina commit --amend --no-edit<CR>", "amend no-edit"]
      },
      d: {
        name: "+diff",
        d: [":Gina compare<CR>",           "2-buffer compare"],
        h: [":SignifyToggleHighlight<CR>", "toggle hightlight"],
        i: [":SignifyHunkDiff<CR>",        "inline diff"],
        s: [":Gina diff<CR>",              "unified diff"]
      },
      h: {
        name: "+hunks",
        u: [":SignifyHunkUndo<CR>", "undo changes"]
      },
      l: {
        name: "+logs",
        l: [":Gina log<CR>", "log"]
      },
      p: {
        name: "+push",
        p: [":Gina push<CR>", "push"],
        f: [":Gina push --force<CR>", "force push"]
      },
      s: [":Gina status<CR>", "status"],
      m: [":Magit<CR>", "magit"],
      z: {
        name: "+stash",
        b: [":Gina stash<CR>",   "stash buffer"],
        s: [":Gina stash show ", "show"]
      }
    },

    // -- Search ------------------------------
    s: {
      name: "+search",
      c: [":nohlsearch<CR>",               "clear highlights"],
      g: [":<C-u>Denite grep:. -no-empty", "search cwd"],
      u: [":<C-u>DeniteCursorWord grep:.", "word under cursor"],
      r: {
        name: "+ripgrep",
        g: [":tabnew \\| :Rg -i", "rg"]
      }
    },

    // More sane regexes
    "/": "/\\v",
    "?": "?\\v",
    "s/": "s/\\v",

    // -- Text --------------------------------
    // - --> Delete the current line
    // Q --> Don't use Ex mode, use Q for formatting
    // Y --> Make Y behave like other capital letters
    // ----------------------------------------
    "-": "dd",
    Q: "gq",
    Y: "y$",

    x: {
      name: "+text",
      a: [":EasyAlign", "align text"]
    },

    // -- Toggles -----------------------------
    t: {
      name: "+toogles",
      c: [":Denite colorscheme", "cycle color schemes"]
    },

    // -- Windows -----------------------------
    // Easier window navigation
    // Ctrl + h --> Go to window left of current
    // Ctrl + j --> Go to window below current
    // Ctrl + k --> Go to window above current
    // Ctrl + l --> Go to window right of current
    // ----------------------------------------
    "<C-h>": "<C-w>h",
    "<C-j>": "<C-w>j",
    "<C-k>": "<C-w>k",
    "<C-l>": "<C-w>l",

    w: {
      name: "+windows",
      s:   [":exe 'split'<CR>",  "horizontal split"],
      v:   [":exe 'vsplit'<CR>", "vertical split"],
      c:   [":close<CR>",        "close current window"],
      l:   [":lopen<CR>",        "open location list"],
      q:   [":copen<CR>",        "open quickfix"],
      W:   ["<Plug>(choosewin)", "jump to window"],
      "+": [":resize +5<CR>",    "increase height"],
      "-": [":resize -5<CR>",    "decrease height"]
    }
  },

  noremap: {
    // Easier navigation on line-wrapped text
    j: "gj",
    k: "gk",
    gj: "j",
    gk: "k",

    tc: ":tabnew<CR>"
  },

  cnoremap: {
    // Heretical mappings
    // Ctrl + a --> Jump to beginning of line
    // Ctrl + b --> Back one character
    // Ctrl + d --> Delete one character
    // Ctrl + e --> Jump to end of line
    // Ctrl + f --> Forward one character
    // Ctrl + n --> Go forwards in history to the a newer entry
    // Ctrl + p --> Go backwards in history to an older entry
    // ----------------------------------------
    "<C-A>": "<Home>",
    "<C-B>": "<Left>",
    "<C-D>": "<Del>",
    "<C-E>": "<End>",
    "<C-F>": "<Right>",
    "<C-N>": "<Down>",
    "<C-P>": "<Up>",

    // More sane regexes
    "s/": "s/\\v",
    "%s/": "%s/\\v",

    // Using sudo to write to a file
    "w!!": "w !sudo tee % >/dev/null"
  },

  inoremap: {
    // jk --> Escape from insert mode without stretching your fingers
    // Ctrl + U --> CTRL-U in insert mode deletes a lot. Use CTRL-G u to first break undo,
    //              so that you can undo CTRL-U after inserting a line break.
    // Ctrl + d --> Delete text after the cusor position in insert mode.
    // ----------------------------------------
    jk: "<ESC>",
    "<C-U>": "<C-G>u<C-U>",
    "<C-d>": "<C-[>ld$A",

    // coc.nvim snippets - see https://github.com/neoclide/coc.nvim/wiki/Using-snippets
    "<silent><expr> <CR>": 'pumvisible() ? coc#_select_confirm() : "<C-g>u<CR><c-r>=coc#on_enter()<CR>"'
  },

  snoremap: {},

  tnoremap: {
    // Navigate windows from the terminal using Alt + h/j/k/l
    "<A-h>": "<C-><C-N><C-w>h",
    "<A-j>": "<C-><C-N><C-w>j",
    "<A-k>": "<C-><C-N><C-w>k",
    "<A-l>": "<C-><C-N><C-w>l",

    // Simulate i_CTRL-R
    "<expr> <C-R>": "'<C-><C-N>\"' . nr2char(getchar()) . 'pi'",

    // Exit terminal mode easily
    "<Esc>": "<C-><C-N>"
  },

  vnoremap: {
    // More sane regexes
    "/":   "/\\v",
    "?":   "?\\v",
    "s/":  "s/\\v",
    "%s/": "%s/\\v",

    "<leader>*": ":<C-u>call VisualStarSearchSet('/', 'raw')<CR>:call ag#Ag('grep', '--literal ' . shellescape(@/))<CR>"
  },

  map: {
    // -- Comment/Compile ---------------------
    c: {
      name: "+comments/compile",
      c: ["<plug>NERDCommenterToggle",    "comment one line"],
      s: ["<plug>NERDCommenterSexy",      "comment sexily"],
      u: ["<plug>NERDCommenterUncomment", "uncomment"]
    },

    // -- Version Control ---------------------
    g: {
      name: "+version-control",
      l: {
        name: "+logs",
        c: ["<Plug>(git-messenger)",            "last commit message"],
        p: ["<Plug>(git-messenger-into-popup)", "open popup"]
      },
      h: {
        name: "+hunks",
          n: ["<Plug>(signify-next-hunk)", "next"],
          p: ["<Plug>(signify-prev-hunk)", "prev"]
      }
    },

    // -- Jumps/Folds -------------------------
    j: {
      name: "+jumps/folds",
      j: ["<Plug>(easymotion-s)", "easymotion"]
    },

    // -- Windows -----------------------------
    w: {
      name: "+windows",
      W: ["<Plug>(choosewin)", "jump to window"]
    },

    // Maintain ; and , functionality with clever-f plugin
    ";": "<Plug>(clever-f-repeat-forward)",
    ",": "<Plug>(clever-f-repeat-back)"
  },

  nmap: {
    // Start interactive EasyAlign for a motion/text object (e.g. gaip)
    //"ga": "<Plug>(EasyAlign)",
  },

  imap: {
    "<C-l>": "<Plug>(coc-snippets-expand)",
    "<C-j>": "<Plug>(coc-snippets-expand-jump)"
  },

  smap: {
  },

  vmap: {
    // Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
    "<Enter>": "<Plug>(EasyAlign)",
    "<C-j>": "<Plug>(coc-snippets-select)"
  }
}
